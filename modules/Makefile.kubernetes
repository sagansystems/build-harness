CLUSTER_BASTION ?= bastion.$(CLUSTER)
KUBERNETES_ANNOTATION ?= $(shell date -u +'%Y-%m-%d %H:%M:%SZ')
KUBERNETES_APP ?= $(subst -docker,,$(shell basename "`pwd`"))
KUBERNETES_RESOURCE_PATH ?= ./kubernetes
KUBERNETES_RESOURCE_VALIDATION ?= configmap
export KUBERNETES_APP

# Kubectl specific settings
KUBECTL ?= /usr/local/bin/kubectl
KUBEUTIL ?= $(MAKEFILE_DIR)/kube-util

# Flag to control whether or not `kubernetes:status` is called on deployments
KUBECTL_STATUS ?= true

# Serial number optionally used for versioning; select the last 5 characters of unix time (24 character limit to resource names in k8s)
SERIAL ?= $(shell echo -n $$(date +%s) | tail -c 5)
export SERIAL

# Specify DEBUG=/dev/stderr to get useful output to stderr
DEBUG ?= /dev/null

define envsubst
	# Optionally load parameters for the kubernetes resources
	set -a; \
	source $(KUBERNETES_RESOURCE_PATH)/config/default.k8sparameters || true; \
	source $(KUBERNETES_RESOURCE_PATH)/config/$(CLUSTER_NAMESPACE).$(CLUSTER_DOMAIN).k8sparameters || true; \
	set +a; \
	envsubst < "$(1)" | envsubst | tee $(DEBUG)
endef

define kubectl_apply
	$(call assert,CLUSTER_NAMESPACE)
	$(call assert,CLUSTER_DOMAIN)
	@echo -e "INFO: Applying changes to $(KUBERNETES_APP) $(1) on cluster $(call yellow,$(CLUSTER))..."
	@$(call envsubst,$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-$(1).yml) | $(KUBECTL_CMD) apply $(2) -f -
endef

define kubectl_create
	$(call assert,CLUSTER_NAMESPACE)
	$(call assert,CLUSTER_DOMAIN)
	@echo -e "INFO: Creating $(KUBERNETES_APP) $(1) on cluster $(call yellow,$(CLUSTER))..."
	@$(call envsubst,$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-$(1).yml) | $(KUBECTL_CMD) create -f -
endef

define kubectl_delete
	$(call assert,CLUSTER_NAMESPACE)
	$(call assert,CLUSTER_DOMAIN)
	@echo -e "INFO: Deleteting $(KUBERNETES_APP) $(1) on cluster $(call yellow,$(CLUSTER))..."
	@$(call envsubst,$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-$(1).yml) | $(KUBECTL_CMD) delete --ignore-not-found=true -f -
endef

ifeq ($(CIRCLECI),true)
  CLUSTER_NAMESPACE ?= $(CIRCLE_BRANCH)
endif

SSH_PROXY_OPTIONS := -i ~/.tsh/keys/portal.$(CLUSTER)/$(OKTA_USER) -o ProxyCommand='ssh -p 3023 -i ~/.tsh/keys/portal.$(CLUSTER)/$(OKTA_USER) $(KUBECTL_SSH_USER)@portal.$(CLUSTER) -s proxy:bastion.$(CLUSTER):3022' portal.$(CLUSTER)

KUBECTL_CMD ?= "$(KUBECTL)" --logtostderr=true --insecure-skip-tls-verify=true

## Display info about the kubernetes setup
kubernetes\:info:
	@echo -e "Cluster: $(call yellow,$(CLUSTER))"

# (private) Validate a configuration
kubernetes\:validate:
	@for env in $$(grep -Eo '\$$[A-Z_0-9]+' $(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-$(KUBERNETES_RESOURCE_VALIDATION).yml | cut -d\$$ -f2); do \
    if [ -z "$${!env}" ]; then \
      echo "$$env not defined in $(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-$(KUBERNETES_RESOURCE_VALIDATION).yml"; \
      exit 1; \
    fi; \
  done

## Apply an arbitrary resource to the cluster
kubernetes\:apply-resource:
	@if [ ! -f "$(KUBERNETES_FQ_RESOURCE)" ]; then \
		echo 'File $(KUBERNETES_FQ_RESOURCE) does not exist'; exit 1; \
	fi;
	$(call assert,CLUSTER)
	@echo -e "INFO: Applying changes to $(KUBERNETES_FQ_RESOURCE) on cluster $(call yellow,$(CLUSTER))..."
	@$(call envsubst,$(KUBERNETES_FQ_RESOURCE)) | $(KUBECTL_CMD) apply -f -

kubernetes\:create-resource:
	@if [ ! -f "$(KUBERNETES_FQ_RESOURCE)" ]; then \
		echo 'File $(KUBERNETES_FQ_RESOURCE) does not exist'; exit 1; \
	fi;
	$(call assert,CLUSTER)
	@echo -e "INFO: Creating resource for $(KUBERNETES_FQ_RESOURCE) on cluster $(call yellow,$(CLUSTER))..."
	@$(call envsubst,$(KUBERNETES_FQ_RESOURCE)) | $(KUBECTL_CMD) create -f -

kubernetes\:delete-resource:
	@if [ ! -f "$(KUBERNETES_FQ_RESOURCE)" ]; then \
		echo 'File $(KUBERNETES_FQ_RESOURCE) does not exist'; exit 1; \
	fi;
	$(call assert,CLUSTER)
	@echo -e "INFO: Deleting resource for $(KUBERNETES_FQ_RESOURCE) on cluster $(call yellow,$(CLUSTER))..."
	@$(call envsubst,$(KUBERNETES_FQ_RESOURCE)) | $(KUBECTL_CMD) delete --ignore-not-found=true -f -


# (private) Delete a horizontalpodautoscaler
kubernetes\:delete-horizontalpodautoscaler:
	$(call kubectl_delete,horizontalpodautoscaler)

# (private) Update horizontalpodautoscaler or create, if necessary
kubernetes\:apply-horizontalpodautoscaler:
	$(call kubectl_apply,horizontalpodautoscaler)

# (private) Delete a service
kubernetes\:delete-service:
	$(call kubectl_delete,service)

# (private) Update service or create, if necessary
kubernetes\:apply-service:
	$(call kubectl_apply,service,--force)

# (private) Update service or create, if necessary
kubernetes\:apply-cronjob:
	$(call kubectl_apply,cronjob,--force)

# (private) Delete a controller
kubernetes\:delete-controller:
	$(call kubectl_delete,controller)

# (private) Update a controller or create, if necessary
kubernetes\:apply-controller:
	$(call kubectl_apply,controller)

# (private) Delete a deployment
kubernetes\:delete-deployment:
	$(call kubectl_delete,deployment)

# (private) Update existing deployment or create, if necessary
kubernetes\:apply-deployment:
	$(call kubectl_apply,deployment)
	@[ "$(KUBECTL_STATUS)" != "true" ] || time $(SELF) kubernetes:status

## Rollback to previous deployment
kubernetes\:undo-deployment:
	@echo -e "INFO: Rolling back to previous deployment of $(KUBERNETES_APP) on cluster $(call yellow,$(CLUSTER))..."
	@$(KUBECTL_CMD) rollout undo deployment $(KUBERNETES_APP)

# (private) Delete a poddisruptionbudget
kubernetes\:delete-poddisruptionbudget:
	$(call kubectl_delete,poddisruptionbudget)

# (private) Update existing poddisruptionbudget or create, if necessary
kubernetes\:apply-poddisruptionbudget:
	$(call kubectl_apply,poddisruptionbudget)
	@[ "$(KUBECTL_STATUS)" != "true" ] || time $(SELF) kubernetes:status

## Deploy everything that needs to be deployed; notify datadog
kubernetes\:deploy:
	@echo -e "INFO: Deploying $(KUBERNETES_APP) resources on cluster $(call yellow,$(CLUSTER))..."
	$(NOTIFY_STARTING)
	@[ ! -f "$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-poddisruptionbudget.yml" ] || $(SELF) kubernetes:apply-poddisruptionbudget || $(NOTIFY_FAILURE)
	@[ ! -f "$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-deployment.yml" ] || $(SELF) kubernetes:apply-deployment || $(NOTIFY_FAILURE)
	@[ ! -f "$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-controller.yml" ] || $(SELF) kubernetes:apply-controller || $(NOTIFY_FAILURE)
	@[ ! -f "$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-service.yml" ] || $(SELF) kubernetes:apply-service || $(NOTIFY_FAILURE)
	@[ ! -f "$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-horizontalpodautoscaler.yml" ] || $(SELF) kubernetes:apply-horizontalpodautoscaler || $(NOTIFY_FAILURE)
	@[ ! -f "$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-cronjob.yml" ] || $(SELF) kubernetes:apply-cronjob || $(NOTIFY_FAILURE)
	$(NOTIFY_SUCCESS)

# (private) Validate a job
kubernetes\:validate-job:
	@$(SELF) kubernetes:validate KUBERNETES_RESOURCE_VALIDATION=job

# (private) Delete a job
kubernetes\:delete-job:
	$(call kubectl_delete,job)

## Run a job
kubernetes\:run-job:
	@$(SELF) kubernetes:validate-job
	@$(SELF) kubernetes:delete-job 2>&1 || true
	$(call kubectl_create,job)

## Show job logs and return job exit code, requires SSH if ran outside Codefresh
kubernetes\:job-logs:
	@echo -e "INFO: Monitoring job $(KUBERNETES_APP) on cluster $(call yellow,$(CLUSTER))..."
	$(KUBEUTIL) tail-job $(KUBERNETES_APP); \

## Output the status of the deployment
kubernetes\:status:
	@$(KUBECTL_CMD) rollout status deployment $(KUBERNETES_APP)

## List deployed replication controllers for app
kubernetes\:list-rc:
	@echo -e "INFO: Listing replication controllers for $(KUBERNETES_APP) on cluster $(call yellow,$(CLUSTER))..."
	@$(KUBECTL_CMD) get rc -L tag --selector app=$(KUBERNETES_APP)

## List deployed replica sets for app
kubernetes\:list-rs:
	@echo -e "INFO: Listing replica sets for $(KUBERNETES_APP) on cluster $(call yellow,$(CLUSTER))..."
	@$(KUBECTL_CMD) get rs -L tag --selector app=$(KUBERNETES_APP) | grep -Ev '\s+0\s+0\s+' || true

## List deployed pods for app
kubernetes\:list-pods:
	@echo -e "INFO: Listing pods for $(KUBERNETES_APP) on cluster $(call yellow,$(CLUSTER))..."
	@$(KUBECTL_CMD) get pods -L tag --selector app=$(KUBERNETES_APP)

## List deployed services
kubernetes\:list-svc:
	@echo -e "INFO: Listing services on cluster $(call yellow,$(CLUSTER))..."
	@$(KUBECTL_CMD) get svc

## List cronjobs
kubernetes\:list-cronjobs:
	@echo -e "INFO: Listing cronjobs on cluster $(call yellow,$(CLUSTER))..."
	@$(KUBECTL_CMD) get cronjobs

## Show deployment history
kubernetes\:deployment-history:
	@echo -e "INFO: Listing deployments of $(KUBERNETES_APP) on cluster $(call yellow,$(CLUSTER))..."
	@$(KUBECTL_CMD) rollout history deployment $(KUBERNETES_APP)

## List everything that's deployed
kubernetes\:list-deployments:
	@echo -e "INFO: Listing deployments on cluster $(call yellow,$(CLUSTER))..."
	@$(KUBECTL_CMD) get deployments -L tag

## List everything that's deployed
kubernetes\:list-pdbs:
	@echo -e "INFO: Listing pod disruption budgets on cluster $(call yellow,$(CLUSTER))..."
	@$(KUBECTL_CMD) get pdb -L tag

